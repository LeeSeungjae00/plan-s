[{"/Users/iseungjae/Desktop/plan-s/src/App.js":"1","/Users/iseungjae/Desktop/plan-s/src/Content/tapModule.jsx":"2","/Users/iseungjae/Desktop/plan-s/src/Content/ResultTable.jsx":"3","/Users/iseungjae/Desktop/plan-s/src/Content/RadioComponent.jsx":"4","/Users/iseungjae/Desktop/plan-s/src/Module/madeAPIData.jsx":"5","/Users/iseungjae/Desktop/plan-s/src/reportWebVitals.js":"6","/Users/iseungjae/Desktop/plan-s/src/index.js":"7","/Users/iseungjae/Desktop/plan-s/src/Content/Header/Header.jsx":"8"},{"size":4271,"mtime":1659798761805,"results":"9","hashOfConfig":"10"},{"size":7479,"mtime":1659256777625,"results":"11","hashOfConfig":"10"},{"size":7751,"mtime":1659849082134,"results":"12","hashOfConfig":"10"},{"size":1603,"mtime":1659255411138,"results":"13","hashOfConfig":"10"},{"size":4349,"mtime":1659799143217,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1659255411140,"results":"15","hashOfConfig":"10"},{"size":696,"mtime":1659255411139,"results":"16","hashOfConfig":"10"},{"size":394,"mtime":1659255411138,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b4zj3s",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/iseungjae/Desktop/plan-s/src/App.js",[],"/Users/iseungjae/Desktop/plan-s/src/Content/tapModule.jsx",["37"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { SendOutlined } from '@material-ui/icons';\r\nimport InputComponent from './InputComponent';\r\nimport RadioComponent from './RadioComponent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"grid\",\r\n        gap: \"15px\"\r\n    },\r\n    icon: {\r\n        marginRight: \"3px\",\r\n        width: \"0.7em\"\r\n    },\r\n    sendButton: {\r\n        width: 80,\r\n        float: 'right'\r\n    },\r\n    buttonProgress: {\r\n        color: \"#fff\",\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    tab: {\r\n        backgroundColor: \"#565656\",\r\n        borderRadius: \"10px 10px 0px 0px\"\r\n    },\r\n    selectTab: {\r\n        backgroundColor: \"#4951d9\"\r\n    }\r\n}));\r\n\r\nexport function TabPanel(props) {\r\n    const classes = useStyles();\r\n    const formRef = React.useRef();\r\n    const { onSend, loading, rangeFilter, result, setTableVisible, setResult } = props;\r\n    const [sex, setSex] = useState('');\r\n    const [race, setRace] = useState('');\r\n    const [antivirals, setAntivirals] = useState('');\r\n    const [cirrhosis, setCirrhosis] = useState('');\r\n    const [hebeag, setHebeag] = useState('');\r\n\r\n\r\n    return (\r\n\r\n        <Box className={classes.root} p={3}>\r\n            <form className=\"input_form\"\r\n                ref={formRef}\r\n                role=\"tabpanel\"\r\n                id={`nav-tabpanel-1`}\r\n                aria-labelledby={`nav-tab-1`}\r\n            >\r\n                <InputComponent\r\n                    type=\"number\"\r\n                    lable=\"Platelet, baseline\"\r\n                    min={rangeFilter?.platelet?.min}\r\n                    max={rangeFilter?.platelet?.max}\r\n                    adornment={<>x1000mm<sup className=\"mutip\">3</sup></>}\r\n                    setInputVal={platelet => setResult({ ...result, platelet })}\r\n                ></InputComponent>\r\n                <RadioComponent\r\n                    val={sex}\r\n                    setVal={setSex}\r\n                    title=\"Sex\"\r\n                    value1={\"true\"}\r\n                    value2={\"false\"}\r\n                    lable1=\"male\"\r\n                    lable2=\"female\"\r\n                    setRadioVal={male => setResult({ ...result, male })}\r\n                ></RadioComponent>\r\n                <InputComponent\r\n                    // val = {totalBilirubin}\r\n                    // setVal = {setTotalBilirubin}\r\n                    type=\"number\"\r\n                    lable=\"Total bilirubin, baseline\"\r\n                    min={rangeFilter?.total_bilirubin?.min}\r\n                    max={rangeFilter?.total_bilirubin?.max}\r\n                    adornment=\"mg/dL\"\r\n                    setInputVal={total_bilirubin => setResult({ ...result, total_bilirubin })}\r\n                ></InputComponent>\r\n                <RadioComponent\r\n                    val={antivirals}\r\n                    setVal={setAntivirals}\r\n                    title=\"Antivirals agent\"\r\n                    value1={\"Entecavir\"}\r\n                    value2={\"Tenofovir DF\"}\r\n                    lable1=\"Entecavir\"\r\n                    lable2=\"Tenofovir DF\"\r\n                    setRadioVal={antivirals => setResult({ ...result, antivirals })}\r\n                ></RadioComponent>\r\n                <InputComponent\r\n                    // val = {alt}\r\n                    // setVal = {setAlt}\r\n                    type=\"number\"\r\n                    lable=\"ALT, baseline\"\r\n                    min={rangeFilter?.ALT?.min}\r\n                    max={rangeFilter?.ALT?.max}\r\n                    adornment=\"U/L\"\r\n                    setInputVal={ALT => setResult({ ...result, ALT })}\r\n                ></InputComponent>\r\n                <RadioComponent\r\n                    val={cirrhosis}\r\n                    setVal={setCirrhosis}\r\n                    title=\"Cirrhosis, baseline\"\r\n                    value1={\"true\"}\r\n                    value2={\"false\"}\r\n                    lable1=\"yes\"\r\n                    lable2=\"no\"\r\n                    setRadioVal={cirrhosis => setResult({ ...result, cirrhosis })}\r\n                ></RadioComponent>\r\n                <InputComponent\r\n                    // val = {hbv_dna}\r\n                    // setVal = {setHbv_dna}\r\n                    type=\"number\"\r\n                    lable=\"HBV DNA, baseline\"\r\n                    min={rangeFilter?.HBV_DNA?.min}\r\n                    max={rangeFilter?.HBV_DNA?.max}\r\n                    adornment=\"IU/mL\"\r\n                    setInputVal={HBV_DNA => setResult({ ...result, HBV_DNA })}\r\n                ></InputComponent>\r\n\r\n                <RadioComponent\r\n                    val={hebeag}\r\n                    setVal={setHebeag}\r\n                    title=\"Presence of HBeAg, baseline\"\r\n                    value1={\"true\"}\r\n                    value2={\"false\"}\r\n                    lable1=\"yes\"\r\n                    lable2=\"no\"\r\n                    setRadioVal={presence_of_HBeAg => setResult({ ...result, presence_of_HBeAg })}\r\n                ></RadioComponent>\r\n\r\n            </form>\r\n            <div>\r\n                <Button\r\n                    style={{ width: 142 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.sendButton}\r\n                    onClick={onSend}\r\n                    disabled={loading}\r\n                >{loading ?\r\n                    <><CircularProgress size={24} className={classes.buttonProgress} />&nbsp;</> :\r\n                    <><SendOutlined className={classes.icon} ></SendOutlined>prediction</>\r\n                    }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.sendButton}\r\n                    onClick={() => {\r\n                        setSex('');\r\n                        setRace('');\r\n                        setAntivirals('');\r\n                        setCirrhosis('');\r\n                        setHebeag('');\r\n                        setTableVisible(false);\r\n                        formRef.current.reset();\r\n                        setResult({});\r\n                    }}\r\n                    disabled={loading}\r\n                    style={{ marginRight: 10 }}\r\n                >clear\r\n                </Button>\r\n            </div>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport function a11yProps(index) {\r\n    return {\r\n        id: `nav-tab-${index}`,\r\n        'aria-controls': `nav-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nexport function LinkTab(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Tab\r\n                onFocus={(e) => {\r\n                    document.getElementById(\"Age_id\").focus();\r\n                }}\r\n                classes={{\r\n                    root: classes.tab,\r\n                    selected: classes.selectTab\r\n\r\n                }}\r\n                component=\"a\"\r\n                onClick={(event) => {\r\n                    event.preventDefault();\r\n                }}\r\n                {...props}\r\n            />\r\n        </>\r\n    );\r\n}","/Users/iseungjae/Desktop/plan-s/src/Content/ResultTable.jsx",["38"],"/Users/iseungjae/Desktop/plan-s/src/Content/RadioComponent.jsx",[],"/Users/iseungjae/Desktop/plan-s/src/Module/madeAPIData.jsx",["39"],"const APITITLE = [\r\n    \"platelet\",\r\n    \"total_bilirubin\",\r\n    \"ALT\",\r\n    \"HBV_DNA\",\r\n    \"male\",\r\n    \"antivirals\",\r\n    \"cirrhosis\",\r\n    \"presence_of_HBeAg\"\r\n]\r\n\r\nconst titleMap = {\r\n    platelet : \"Platelet, baseline\",\r\n    total_bilirubin : \"Total bilirubin, baseline\",\r\n    ALT : \"ALT, baseline\",\r\n    HBV_DNA : \"HBV DNA, baseline\",\r\n    male : \"Sex\",\r\n    antivirals : \"Antivirals agent\",\r\n    cirrhosis : \"Cirrhosis, baseline\",\r\n    presence_of_HBeAg : \"Presence of HBeAg, baseline\"\r\n}\r\n\r\nfunction toUnicodeVariant(str, variant, flags) {\r\n    const offsets = {\r\n        m: [0x1d670, 0x1d7f6],\r\n        b: [0x1d400, 0x1d7ce],\r\n        i: [0x1d434, 0x00030],\r\n        bi: [0x1d468, 0x00030],\r\n        c: [0x1d49c, 0x00030],\r\n        bc: [0x1d4d0, 0x00030],\r\n        g: [0x1d504, 0x00030],\r\n        d: [0x1d538, 0x1d7d8],\r\n        bg: [0x1d56c, 0x00030],\r\n        s: [0x1d5a0, 0x1d7e2],\r\n        bs: [0x1d5d4, 0x1d7ec],\r\n        is: [0x1d608, 0x00030],\r\n        bis: [0x1d63c, 0x00030],\r\n        o: [0x24B6, 0x2460],\r\n        p: [0x249C, 0x2474],\r\n        w: [0xff21, 0xff10],\r\n        u: [0x2090, 0xff10]\r\n    }\r\n\r\n    const variantOffsets = {\r\n        'monospace': 'm',\r\n        'bold': 'b',\r\n        'italic': 'i',\r\n        'bold italic': 'bi',\r\n        'script': 'c',\r\n        'bold script': 'bc',\r\n        'gothic': 'g',\r\n        'gothic bold': 'bg',\r\n        'doublestruck': 'd',\r\n        'sans': 's',\r\n        'bold sans': 'bs',\r\n        'italic sans': 'is',\r\n        'bold italic sans': 'bis',\r\n        'parenthesis': 'p',\r\n        'circled': 'o',\r\n        'fullwidth': 'w'\r\n    }\r\n\r\n    // special characters (absolute values)\r\n    var special = {\r\n        m: {\r\n            ' ': 0x2000,\r\n            '-': 0x2013\r\n        },\r\n        i: {\r\n            'h': 0x210e\r\n        },\r\n        g: {\r\n            'C': 0x212d,\r\n            'H': 0x210c,\r\n            'I': 0x2111,\r\n            'R': 0x211c,\r\n            'Z': 0x2128\r\n        },\r\n        o: {\r\n            '0': 0x24EA,\r\n            '1': 0x2460,\r\n            '2': 0x2461,\r\n            '3': 0x2462,\r\n            '4': 0x2463,\r\n            '5': 0x2464,\r\n            '6': 0x2465,\r\n            '7': 0x2466,\r\n            '8': 0x2467,\r\n            '9': 0x2468,\r\n        },\r\n        p: {},\r\n        w: {}\r\n    }\r\n    //support for parenthesized latin letters small cases \r\n    for (var i = 97; i <= 122; i++) {\r\n        special.p[String.fromCharCode(i)] = 0x249C + (i - 97)\r\n    }\r\n    //support for full width latin letters small cases \r\n    for (var i = 97; i <= 122; i++) {\r\n        special.w[String.fromCharCode(i)] = 0xff41 + (i - 97)\r\n    }\r\n\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n    const numbers = '0123456789';\r\n\r\n    var getType = function (variant) {\r\n        if (variantOffsets[variant]) return variantOffsets[variant]\r\n        if (offsets[variant]) return variant;\r\n        return 'm'; //monospace as default\r\n    }\r\n    var getFlag = function (flag, flags) {\r\n        if (!flags) return false\r\n        return flags.split(',').indexOf(flag) > -1\r\n    }\r\n\r\n    var type = getType(variant);\r\n    var underline = getFlag('underline', flags);\r\n    var strike = getFlag('strike', flags);\r\n    var result = '';\r\n\r\n    for (var k of str) {\r\n        let index\r\n        let c = k\r\n        if (special[type] && special[type][c]) c = String.fromCodePoint(special[type][c])\r\n        if (type && (index = chars.indexOf(c)) > -1) {\r\n            result += String.fromCodePoint(index + offsets[type][0])\r\n        } else if (type && (index = numbers.indexOf(c)) > -1) {\r\n            result += String.fromCodePoint(index + offsets[type][1])\r\n        } else {\r\n            result += c\r\n        }\r\n        if (underline) result += '\\u0332' // add combining underline\r\n        if (strike) result += '\\u0336' // add combining strike\r\n    }\r\n    return result\r\n}\r\n\r\nconst madeAPIData = (result, range) => {\r\n    console.log(result)\r\n\r\n    for(let i = 0 ; i < APITITLE.length; i++){\r\n        if(result[APITITLE[i]] === undefined) \r\n            return `Please enter a ${toUnicodeVariant(titleMap[APITITLE[i]], 'bold sans', 'bold')} value`\r\n        if(result[APITITLE[i]] === \"RangeOut\")\r\n            return `Enter according to ${toUnicodeVariant(titleMap[APITITLE[i]], 'bold sans', 'bold')} range` \r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default madeAPIData;\r\n","/Users/iseungjae/Desktop/plan-s/src/reportWebVitals.js",[],["40","41"],"/Users/iseungjae/Desktop/plan-s/src/index.js",[],"/Users/iseungjae/Desktop/plan-s/src/Content/Header/Header.jsx",[],{"ruleId":"42","severity":1,"message":"43","line":46,"column":12,"nodeType":"44","messageId":"45","endLine":46,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":151,"column":37,"nodeType":"48","endLine":151,"endColumn":113},{"ruleId":"49","severity":1,"message":"50","line":99,"column":14,"nodeType":"44","messageId":"51","endLine":99,"endColumn":15},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},"no-unused-vars","'race' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-redeclare","'i' is already defined.","redeclared","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-global-assign","no-unsafe-negation"]